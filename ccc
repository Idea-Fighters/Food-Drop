import pygame
import random
import time

# Pygame 초기화
pygame.init()

# 화면 크기 설정
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))

# 색상 정의
white = (255, 255, 255)
black = (0, 0, 0)
red = (255, 0, 0)
green = (0, 255, 0)

# 이미지 로드 및 크기 조정
item_size = 40  # 과일과 똥, 하트의 크기를 40x40으로 설정
player_size = 65  # 플레이어 크기를 65x65으로 설정

apple_img = pygame.image.load('images/apple.png')
apple_img = pygame.transform.scale(apple_img, (item_size, item_size))

peach_img = pygame.image.load('images/peach.png')
peach_img = pygame.transform.scale(peach_img, (item_size, item_size))

poop_img = pygame.image.load('images/poop.png')
poop_img = pygame.transform.scale(poop_img, (item_size, item_size))

heart_img = pygame.image.load('images/heart.png')
heart_img = pygame.transform.scale(heart_img, (item_size, item_size))

player_img = pygame.image.load('images/player.png')
player_img = pygame.transform.scale(player_img, (player_size, player_size))

# 게임 변수 초기화
player_pos = [screen_width // 2, screen_height - player_size]
player_speed = 8  # 플레이어 속도를 8로 변경
score = 0
lives = 3
last_heart_time = time.time()
item_creation_rate = 30  # 아이템 생성 간격 (프레임 단위)
poop_creation_increment = 10  # 10초마다 똥 생성 확률 증가
start_time = time.time()

# 아이템 클래스 정의
class Item:
    def __init__(self, x, y, image, kind):
        self.x = x
        self.y = y
        self.image = image
        self.kind = kind
    
    def fall(self, speed):
        self.y += speed

# 아이템 생성 함수
def create_item(kind=None):
    x = random.randint(0, screen_width - item_size)
    y = -item_size
    if kind is None:
        elapsed_time = time.time() - start_time
        poop_probability = 0.1 + (elapsed_time // poop_creation_increment) * 0.05
        kind = random.choices(['apple', 'peach', 'poop'], [0.4, 0.4, poop_probability])[0]
    if kind == 'apple':
        return Item(x, y, apple_img, kind)
    elif kind == 'peach':
        return Item(x, y, peach_img, kind)
    elif kind == 'poop':
        return Item(x, y, poop_img, kind)
    elif kind == 'heart':
        return Item(x, y, heart_img, kind)

# 충돌 검사 함수
def is_collision(item, player_pos):
    px, py = player_pos
    ix, iy = item.x, item.y
    return px < ix < px + item_size and py < iy < py + item_size

# 게임 오버 함수
def game_over():
    font = pygame.font.Font(None, 74)
    game_over_text = font.render('Game Over', True, red)
    screen.blit(game_over_text, (screen_width // 2 - 150, screen_height // 2 - 50))
    pygame.display.flip()
    time.sleep(3)
    pygame.quit()
    exit()

# 시간을 문자열로 변환하는 함수
def format_time(seconds):
    minutes = seconds // 60
    seconds %= 60
    return f'Time: {int(minutes):02d}:{int(seconds):02d}'

# 메인 게임 루프
items = []
clock = pygame.time.Clock()
running = True
frame_count = 0

while running:
    screen.fill(white)
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT] and player_pos[0] > 0:
        player_pos[0] -= player_speed
    if keys[pygame.K_RIGHT] and player_pos[0] < screen_width - player_size:
        player_pos[0] += player_speed
    
    # 특정 프레임마다 아이템 생성
    if frame_count % item_creation_rate == 0:
        items.append(create_item())
    frame_count += 1
    
    for item in items:
        item.fall(5)
        screen.blit(item.image, (item.x, item.y))
        
        if is_collision(item, player_pos):
            if item.kind == 'apple':
                score += 5
            elif item.kind == 'peach':
                score += 10
            elif item.kind == 'poop':
                lives -= 1
            elif item.kind == 'heart':
                lives = min(lives + 1, 3)
            items.remove(item)
    
    # 아이템 제거 (화면 밖으로 나간 경우)
    items = [item for item in items if item.y < screen_height]
    
    # 15초마다 하트 생성
    if time.time() - last_heart_time > 15:
        items.append(create_item('heart'))
        last_heart_time = time.time()
    
    # 플레이어 그리기
    screen.blit(player_img, (player_pos[0], player_pos[1]))
    
    # 점수와 목숨 표시
    font = pygame.font.Font(None, 36)
    score_text = font.render(f'Score: {score}', True, black)
    lives_text = font.render(f'Lives: {lives}', True, black)
    screen.blit(score_text, (10, 10))
    screen.blit(lives_text, (10, 50))
    
    # 경과 시간 표시
    elapsed_time = time.time() - start_time
    time_text = font.render(format_time(elapsed_time), True, black)
    screen.blit(time_text, (10, 90))
    
    pygame.display.flip()
    clock.tick(30)
    
    if lives <= 0:
        game_over()

pygame.quit()

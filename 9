from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives.asymmetric.utils import Prehashed

# RSA 키 쌍 생성
private_key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048
)
public_key = private_key.public_key()

# 메시지 서명 함수
def sign_message(private_key, message):
    signature = private_key.sign(
        message,
        padding.PSS(
            mgf=padding.MGF1(hashes.SHA256()),
            salt_length=padding.PSS.MAX_LENGTH
        ),
        Prehashed(hashes.SHA256())
    )
    return signature

# 서명 검증 함수
def verify_signature(public_key, message, signature):
    try:
        public_key.verify(
            signature,
            message,
            padding.PSS(
                mgf=padding.MGF1(hashes.SHA256()),
                salt_length=padding.PSS.MAX_LENGTH
            ),
            Prehashed(hashes.SHA256())
        )
        return True
    except Exception as e:
        return False

# 메시지 예제
message = b'This is a secret message.'

# 메시지 해시
digest = hashes.Hash(hashes.SHA256())
digest.update(message)
prehashed_message = digest.finalize()

# 메시지 서명
signature = sign_message(private_key, prehashed_message)
print(f"Signature: {signature.hex()}")

# 서명 검증
is_valid = verify_signature(public_key, prehashed_message, signature)
print(f"Signature valid: {is_valid}")

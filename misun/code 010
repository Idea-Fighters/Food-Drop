import java.util.*;

public class BreadthFirstSearch {
    public static void main(String[] args) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        graph.put(0, Arrays.asList(1, 2));
        graph.put(1, Arrays.asList(0, 2, 3));
        graph.put(2, Arrays.asList(0, 1, 4));
        graph.put(3, Arrays.asList(1, 5));
        graph.put(4, Arrays.asList(2, 6));
        graph.put(5, Arrays.asList(3, 6));
        graph.put(6, Arrays.asList(4, 5));

        int start = 0;
        int end = 6;

        List<Integer> shortestPath = findShortestPath(graph, start, end);
        if (shortestPath != null) {
            System.out.println("최단 경로: " + shortestPath);
        } else {
            System.out.println("최단 경로가 존재하지 않습니다.");
        }
    }

    public static List<Integer> findShortestPath(Map<Integer, List<Integer>> graph, int start, int end) {
        Queue<Integer> queue = new LinkedList<>();
        Map<Integer, Integer> prev = new HashMap<>();
        Set<Integer> visited = new HashSet<>();

        queue.offer(start);
        visited.add(start);

        while (!queue.isEmpty()) {
            int current = queue.poll();
            if (current == end) {
                return reconstructPath(prev, start, end);
            }
            for (int neighbor : graph.getOrDefault(current, Collections.emptyList())) {
                if (!visited.contains(neighbor)) {
                    queue.offer(neighbor);
                    visited.add(neighbor);
                    prev.put(neighbor, current);
                }
            }
        }

        return null;
    }

    public static List<Integer> reconstructPath(Map<Integer, Integer> prev, int start, int end) {
        List<Integer> path = new ArrayList<>();
        int current = end;
        while (current != start) {
            path.add(0, current);
            current = prev.get(current);
        }
        path.add(0, start);
        return path;
    }
}

import numpy as np
import matplotlib.pyplot as plt

# 차량 모델 파라미터
dt = 0.1  # 시간 간격 (s)
max_steering_angle = np.deg2rad(30)  # 최대 조향 각도 (라디안)
vehicle_length = 2.5  # 차량 길이 (m)

# 초기 상태
initial_position = np.array([0, 0])  # 초기 위치 (x, y 좌표)
initial_velocity = 10  # 초기 속도 (m/s)
initial_heading = np.deg2rad(90)  # 초기 주행 방향 (라디안)

# 주행 경로 (임의의 직선 경로)
path_length = 100  # 주행 경로 길이 (m)
path = np.vstack((np.linspace(0, path_length, int(path_length / dt)), np.zeros(int(path_length / dt)))).T

# 장애물 위치
obstacle_position = np.array([50, 2])  # 장애물 위치 (x, y 좌표)

# 주행 시뮬레이션 함수
def simulate_drive(initial_position, initial_velocity, initial_heading, path, obstacle_position):
    position = initial_position
    velocity = initial_velocity
    heading = initial_heading

    # 시뮬레이션 루프
    for i in range(len(path)):
        # 차량 제어 (간단한 PID 제어)
        steering_angle = calculate_steering_angle(path[i], position, heading)
        
        # 차량 상태 업데이트
        position, heading = update_vehicle_state(position, heading, velocity, steering_angle)
        
        # 장애물 감지
        if np.linalg.norm(position - obstacle_position) < vehicle_length:
            print("Obstacle detected! Avoiding...")
            # 장애물 회피 알고리즘 적용 (여기서는 간단히 후진)
            velocity = -2
        
        # 결과 출력
        print(f"Time: {i * dt}, Position: {position}, Velocity: {velocity}, Heading: {heading}, Steering Angle: {steering_angle}")

# 차량 제어 함수 (간단한 PID 제어)
def calculate_steering_angle(target_point, position, heading):
    # 간단한 PID 제어를 사용하여 주행 경로를 따라 조향 각도 계산
    # 여기서는 간단히 차량과 주행 경로 사이의 각도 차이를 사용하겠습니다.
    target_heading = np.arctan2(target_point[1] - position[1], target_point[0] - position[0])
    error = target_heading - heading
    steering_angle = np.clip(error, -max_steering_angle, max_steering_angle)  # 최대 조향 각도 범위로 클리핑
    return steering_angle

# 차량 상태 업데이트 함수
def update_vehicle_state(position, heading, velocity, steering_angle):
    # 차량의 새로운 위치와 주행 방향 계산
    new_heading = heading + velocity / vehicle_length * np.tan(steering_angle) * dt
    new_position = position + np.array([velocity * np.cos(heading), velocity * np.sin(heading)]) * dt
    return new_position, new_heading

# 주행 시뮬레이션 실행
simulate_drive(initial_position, initial_velocity, initial_heading, path, obstacle_position)

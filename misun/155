from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import rsa, padding

# RSA 키 생성
def generate_rsa_keys():
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048
    )
    return private_key, private_key.public_key()

# 데이터 암호화 함수
def encrypt_data(public_key, data):
    ciphertext = public_key.encrypt(
        data.encode(),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return ciphertext

# 데이터 복호화 함수
def decrypt_data(private_key, ciphertext):
    plaintext = private_key.decrypt(
        ciphertext,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return plaintext.decode()

# 사용 예제
private_key, public_key = generate_rsa_keys()

original_data = "Hello, World!"

# 데이터 암호화
encrypted_data = encrypt_data(public_key, original_data)
print("Encrypted Data:", encrypted_data)

# 데이터 복호화
decrypted_data = decrypt_data(private_key, encrypted_data)
print("Decrypted Data:", decrypted_data)

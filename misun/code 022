import java.util.ArrayList;
import java.util.List;

public class DepthFirstSearch {
    public static void main(String[] args) {
        int n = 7; // 정점의 수

        // 그래프 생성
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }
        graph.get(0).add(1);
        graph.get(0).add(2);
        graph.get(1).add(0);
        graph.get(1).add(2);
        graph.get(2).add(0);
        graph.get(2).add(1);
        graph.get(3).add(4);
        graph.get(4).add(3);
        graph.get(5).add(6);
        graph.get(6).add(5);

        boolean[] visited = new boolean[n];
        int components = findConnectedComponents(graph, visited);
        System.out.println("연결 요소의 수: " + components);
    }

    public static int findConnectedComponents(List<List<Integer>> graph, boolean[] visited) {
        int components = 0;
        for (int i = 0; i < graph.size(); i++) {
            if (!visited[i]) {
                components++;
                dfs(graph, visited, i);
            }
        }
        return components;
    }

    public static void dfs(List<List<Integer>> graph, boolean[] visited, int vertex) {
        visited[vertex] = true;
        for (int neighbor : graph.get(vertex)) {
            if (!visited[neighbor]) {
                dfs(graph, visited, neighbor);
            }
        }
    }
}

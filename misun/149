from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.backends import default_backend

# RSA 키 생성
def generate_rsa_keys():
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )
    public_key = private_key.public_key()
    return private_key, public_key

# 텍스트 암호화 함수
def encrypt_text(public_key, plaintext):
    ciphertext = public_key.encrypt(
        plaintext.encode(),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=serialization.NoEncryption()),
            algorithm=serialization.NoEncryption(),
            label=None
        )
    )
    return ciphertext

# 텍스트 복호화 함수
def decrypt_text(private_key, ciphertext):
    plaintext = private_key.decrypt(
        ciphertext,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=serialization.NoEncryption()),
            algorithm=serialization.NoEncryption(),
            label=None
        )
    )
    return plaintext.decode()

# 사용 예제
private_key, public_key = generate_rsa_keys()

plaintext = "Hello, World!"

ciphertext = encrypt_text(public_key, plaintext)
print("Encrypted:", ciphertext)

decrypted_text = decrypt_text(private_key, ciphertext)
print("Decrypted:", decrypted_text)

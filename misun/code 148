from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import padding
import os

# AES 암호화 함수
def encrypt_file(key, input_file, output_file):
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())
    encryptor = cipher.encryptor()

    with open(input_file, 'rb') as f:
        file_data = f.read()

    padder = padding.PKCS7(algorithms.AES.block_size).padder()
    padded_data = padder.update(file_data) + padder.finalize()
    
    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()

    with open(output_file, 'wb') as f:
        f.write(iv + encrypted_data)

# AES 복호화 함수
def decrypt_file(key, input_file, output_file):
    with open(input_file, 'rb') as f:
        iv = f.read(16)
        encrypted_data = f.read()

    cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())
    decryptor = cipher.decryptor()

    padded_data = decryptor.update(encrypted_data) + decryptor.finalize()

    unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()
    file_data = unpadder.update(padded_data) + unpadder.finalize()

    with open(output_file, 'wb') as f:
        f.write(file_data)

# 사용 예제
key = os.urandom(32)  # 256비트(32바이트) 키 생성
input_file = 'example.txt'
encrypted_file = 'example_encrypted.txt'
decrypted_file = 'example_decrypted.txt'

# 파일 암호화
encrypt_file(key, input_file, encrypted_file)
print(f"File {input_file} encrypted to {encrypted_file}")

# 파일 복호화
decrypt_file(key, encrypted_file, decrypted_file)
print(f"File {encrypted_file} decrypted to {decrypted_file}")


import socket
import threading
import numpy as np

def check_winner(board):
    for i in range(3):
        if np.all(board[i,:,:] == board[i,0,0]) and board[i,0,0] != 0:
            return board[i,0,0]
        if np.all(board[:,i,:] == board[0,i,0]) and board[0,i,0] != 0:
            return board[0,i,0]
        if np.all(board[:,:,i] == board[0,0,i]) and board[0,0,i] != 0:
            return board[0,0,i]

    for axis in range(3):
        for i in range(3):
            if np.all(board.take(i, axis=axis) == board.take(i, axis=axis)[0, 0]) and board.take(i, axis=axis)[0, 0] != 0:
                return board.take(i, axis=axis)[0, 0]

    if np.all(np.diagonal(board) == board[0,0,0]) and board[0,0,0] != 0:
        return board[0,0,0]
    if np.all(np.diagonal(np.fliplr(board)) == board[0,2,0]) and board[0,2,0] != 0:
        return board[0,2,0]

    return 0

def print_board(board):
    for layer in board:
        print(layer)
        print()

def handle_client(client_socket, addr, board, player):
    while True:
        data = client_socket.recv(1024).decode('utf-8')
        if not data:
            break
        x, y, z = map(int, data.split())
        if board[x, y, z] == 0:
            board[x, y, z] = player
            if check_winner(board) != 0:
                print(f"Player {player} wins!")
                break
        client_socket.send(data.encode('utf-8'))
    client_socket.close()

def server():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind(('0.0.0.0', 9999))
    server.listen(2)
    print("Waiting for connections...")
    board = np.zeros((3, 3, 3), dtype=int)
    player = 1
    while True:
        client_socket, addr = server.accept()
        print(f"Connection from {addr}")
        threading.Thread(target=handle_client, args=(client_socket, addr, board, player)).start()
        player = 3 - player

def client():
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client.connect(('127.0.0.1', 9999))
    board = np.zeros((3, 3, 3), dtype=int)
    player = int(input("Enter your player number (1 or 2): "))
    while True:
        x, y, z = map(int, input("Enter your move (x y z): ").split())
        move = f"{x} {y} {z}"
        client.send(move.encode('utf-8'))
        data = client.recv(1024).decode('utf-8')
        x, y, z = map(int, data.split())
        board[x, y, z] = player
        print_board(board)
        if check_winner(board) != 0:
            print(f"Player {player} wins!")
            break
    client.close()

choice = input("Run as server or client? (s/c): ")
if choice == 's':
    server()
else:
    client()

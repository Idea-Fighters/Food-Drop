import numpy as np

def check_winner(board):
    for i in range(3):
        if np.all(board[i,:,:] == board[i,0,0]) and board[i,0,0] != 0:
            return board[i,0,0]
        if np.all(board[:,i,:] == board[0,i,0]) and board[0,i,0] != 0:
            return board[0,i,0]
        if np.all(board[:,:,i] == board[0,0,i]) and board[0,0,i] != 0:
            return board[0,0,i]

    for axis in range(3):
        for i in range(3):
            if np.all(board.take(i, axis=axis) == board.take(i, axis=axis)[0, 0]) and board.take(i, axis=axis)[0, 0] != 0:
                return board.take(i, axis=axis)[0, 0]

    if np.all(np.diagonal(board) == board[0,0,0]) and board[0,0,0] != 0:
        return board[0,0,0]
    if np.all(np.diagonal(np.fliplr(board)) == board[0,2,0]) and board[0,2,0] != 0:
        return board[0,2,0]

    return 0

def print_board(board):
    for layer in board:
        print(layer)
        print()

def valid_knight_move(start, end):
    sx, sy, sz = start
    ex, ey, ez = end
    dx, dy, dz = abs(ex - sx), abs(ey - sy), abs(ez - sz)
    return (dx == 2 and dy == 1 and dz == 0) or (dx == 1 and dy == 2 and dz == 0) or (dx == 0 and dy == 1 and dz == 2) or (dx == 0 and dy == 2 and dz == 1) or (dx == 2 and dy == 0 and dz == 1) or (dx == 1 and dy == 0 and dz == 2)

def play_game():
    board = np.zeros((3, 3, 3), dtype=int)
    player = 1
    while True:
        print_board(board)
        start = tuple(map(int, input(f"Player {player}, enter the position of the piece you want to move (x y z): ").split()))
        end = tuple(map(int, input(f"Player {player}, enter the new position (x y z): ").split()))
        if board[start] != player or board[end] != 0 or not valid_knight_move(start, end):
            print("Invalid move! Try again.")
            continue
        board[end] = player
        board[start] = 0
        winner = check_winner(board)
        if winner != 0:
            print_board(board)
            print(f"Player {winner} wins!")
            break
        player = 3 - player

play_game()


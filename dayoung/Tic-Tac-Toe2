import pygame
import numpy

pygame.init()

#step1) init

WHITE = (255,255,255)
YELLOW = (255,255,0)
BLACK = (0,0,0)
RED = (255,0,0)

OX_font = pygame.font.SysFont("arial", 72, True, False) #(폰트,사이즈,볼드,기울기)
result_font = pygame.font.SysFont("arial", 90, True, False) #(폰트,사이즈,볼드,기울기)

grid = numpy.array([[" ", " ", " "],[" ", " ", " "],[" ", " ", " "]]) #3x3 배열 선언
turn = 0
playGame = 1

window =pygame.display.set_mode((600,600)) #가로 600, 세로 600화면
pygame.display.set_caption('Tic-Tac-Toe')
clock = pygame.time.Clock()
Size = 200

#step1) grid
def drawGrid(Size): #draw Grid
    COL = 3
    ROW = 3

    for column_index in range(COL):
        for row_index in range(ROW):
            rect = (Size * column_index, Size * row_index, Size, Size)
            pygame.draw.rect(window, WHITE, rect, 1)


#step2) play game and write O or X
def locate(COL, ROW, Size): #find aray with location
    for column_index in range(COL):
        for row_index in range(ROW):
            if (column_index == int(COL/Size) and row_index == int(ROW/Size)):
                return (column_index, row_index)

def checkBlank(grid, COL, ROW): #duplicate prevention
    if grid[COL][ROW] == ' ': 
        return True
    else:
        return False
    
def drawOX(grid, Size): #show O and X
    COL = 3
    ROW = 3
    for column_index in range(COL):
        for row_index in range(ROW):
            if grid[column_index][row_index] == 'O':
                text = OX_font.render('O', False, WHITE)
            elif grid[column_index][row_index] == 'X':
                text = OX_font.render('X', True, YELLOW)
            else:
                text = OX_font.render(' ', True, BLACK)
            window.blit(text, (Size * row_index + Size / 3, Size * column_index + Size / 4))

#step3) who's win? or draw?
def winGame(grid, OX): #check Win
    if (grid[0][0] == OX and grid[0][1] == OX and grid[0][2] == OX) or \
        (grid[1][0] == OX and grid[1][1] == OX and grid[1][2] == OX) or \
        (grid[2][0] == OX and grid[2][1] == OX and grid[2][2] == OX) or \
        (grid[0][0] == OX and grid[1][0] == OX and grid[2][0] == OX) or \
        (grid[0][1] == OX and grid[1][1] == OX and grid[2][1] == OX) or \
        (grid[0][2] == OX and grid[1][2] == OX and grid[2][2] == OX) or \
        (grid[0][0] == OX and grid[1][1] == OX and grid[2][2] == OX) or \
        (grid[0][2] == OX and grid[1][1] == OX and grid[2][0] == OX):
        return True
    else:
        return False
    
def drawGame(turn): #check Draw
    if turn == 9:
        return True
    else:
        return False
        
def drawResult(grid, turn): #show Result

    if winGame(grid, 'O'):
        text = result_font.render('"O" player win!', False, RED)
    elif winGame(grid, 'X'):
        text = result_font.render('"X" player win!', False, RED)
    elif drawGame(turn):
        text = result_font.render('draw game', False, RED)
    else:
        text = result_font.render(' ', True, BLACK)

    window.blit(text, (0, 0))

#step ALL) play it!
while playGame:
    clock.tick(10)
    window.fill(BLACK)

    drawGrid(Size)
    drawOX(grid, Size)
    drawResult(grid, turn)


    for event in pygame.event.get(): 
        if event.type == pygame.QUIT: # 종료키를 누를때 이벤트 처리
            playGame = 0
        if event.type == pygame.MOUSEBUTTONDOWN: # 마우스 클릭을 할때 이벤트 처리
            COL = pygame.mouse.get_pos()[1] #세로 마우스 좌표
            ROW = pygame.mouse.get_pos()[0] #가로 마우스 좌표
            loc = locate(COL, ROW, Size)

            if checkBlank(grid, loc[0], loc[1]):
                if turn % 2 == 0:
                    grid[loc[0], loc[1]] = 'O'
                    turn = turn +1

                else:
                    grid[loc[0], loc[1]] = 'X'
                    turn = turn +1
                print(grid)
        #step4) reset
        if event.type == pygame.KEYUP: #R 버튼을 누를때 이벤트 처리
            if event.key == pygame.K_r:
                grid = numpy.array([[" ", " ", " "],[" ", " ", " "],[" ", " ", " "]])
                turn = 0


    pygame.display.update() #그리기 화면 업데이트

pygame.quit() #pygame 종료

